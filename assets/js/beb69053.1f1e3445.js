"use strict";(self.webpackChunkcluster_docs=self.webpackChunkcluster_docs||[]).push([[8198],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={id:"mc-managed",title:"Apps",sidebar_label:"Apps",sidebar_position:2,tags:["Getting started"]},o="Apps",i={unversionedId:"management-cluster/mc-managed",id:"management-cluster/mc-managed",title:"Apps",description:"The management cluster starts with the same setup as the managed cluster and then we proceed to add additional apps",source:"@site/docs/management-cluster/apps.md",sourceDirName:"management-cluster",slug:"/management-cluster/mc-managed",permalink:"/cluster-docs/docs/management-cluster/mc-managed",draft:!1,editUrl:"https://github.com/nimbit-software/cluster-docs/blob/master/docs/management-cluster/apps.md",tags:[{label:"Getting started",permalink:"/cluster-docs/docs/tags/getting-started"}],version:"current",sidebarPosition:2,frontMatter:{id:"mc-managed",title:"Apps",sidebar_label:"Apps",sidebar_position:2,tags:["Getting started"]},sidebar:"clusterDocs",previous:{title:"Overview",permalink:"/cluster-docs/docs/management-cluster/mc-overview"},next:{title:"Operators",permalink:"/cluster-docs/docs/operators"}},l={},c=[{value:"Rancher",id:"rancher",level:2},{value:"Finishing Up",id:"finishing-up",level:3},{value:"ArgoCD",id:"argocd",level:2},{value:"Monitoring",id:"monitoring",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"apps"},"Apps"),(0,a.kt)("p",null,"The management cluster starts with the same setup as the ",(0,a.kt)("a",{parentName:"p",href:"/docs/cluster/managed-cluster-setup"},"managed cluster")," and then we proceed to add additional apps"),(0,a.kt)("h2",{id:"rancher"},"Rancher"),(0,a.kt)("p",null,"Lets install rancher:"),(0,a.kt)("p",null,"Thankfully we can use helm. Lets add the repos "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add rancher-stable https://releases.rancher.com/server-charts/stable\n\nhelm repo update\n")),(0,a.kt)("p",null,"Next lets create the namespace: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="create namespace"',title:'"create','namespace"':!0},"kubectl create namespace cattle-system\n")),(0,a.kt)("p",null,"And finally we can install Rancher:"),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"It is recommended to to setup the DNS AAA records before setting up rancher that way the cert manager can setup the certificates needed. "),(0,a.kt)("p",{parentName:"admonition"},"It is possible to set it up on a later step but it is definitely more work. "),(0,a.kt)("p",{parentName:"admonition"},"Further details for the install can be found ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ranchermanager.rancher.io/v2.5/pages-for-subheaders/install-upgrade-on-a-kubernetes-cluster"},"here"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title"rancher setup"','title"rancher':!0,'setup"':!0},"# THESE ARE THE RECOMMENDED VALUES. BUT CAN BE ADAPTED AS NEEDED\nexport RANCHER_VERSION=2.6.9\nexport RANCHER_HOST=myhost.com\nexport RANCHER_LE_EMAIL=iot@nimbit.de\nexport RANCHER_CHART_REPO=stable\n\n\nhelm install rancher rancher-$RANCHER_CHART_REPO/rancher \\\n  --namespace cattle-system \\\n  --set hostname=$RANCHER_HOST \\\n  --set replicas=3 \\\n  --version=$RANCHER_VERSION \\\n  --set ingress.tls.source=letsEncrypt \\\n  --set letsEncrypt.email=$RANCHER_LE_EMAIL \\\n  --set letsEncrypt.ingress.class=nginx \\\n  --set ingress.ingressClassName=nginx \\\n  --set ingress.extraAnnotations.'kubernetes\\.io/ingress\\.class'=nginx\n")),(0,a.kt)("p",null,"Now we can wait for it to be rolled out:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n cattle-system rollout status deploy/rancher\n")),(0,a.kt)("p",null,"After the rollout is finished you can run this to verify the system is running: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n cattle-system get deploy rancher\n")),(0,a.kt)("p",null,"You should see something like: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nrancher   3         3         3            3           3m\n")),(0,a.kt)("h3",{id:"finishing-up"},"Finishing Up"),(0,a.kt)("p",null,"You should now be able to go over to you web browser and open the url you defined as the ",(0,a.kt)("strong",{parentName:"p"},"host")," url and get started with rancher. "),(0,a.kt)("p",null,"If this is the initial setup you will be requested to create a new password. "),(0,a.kt)("h2",{id:"argocd"},"ArgoCD"),(0,a.kt)("p",null,"Getting argocd up and running is very straight-forward"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Create namespace"',title:'"Create','namespace"':!0},"# CREATE NAMESPACE\nkubectl create namespace argocd\n")),(0,a.kt)("p",null,"Install last stable version "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Setup Argocd"',title:'"Setup','Argocd"':!0},"# Install stable\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If we want to make argocd accessible from outside the cluster then we need to create an ingress for argocd"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=ingress",title:"ingress"},'# HOST (DNS NAME) should be set here\nexport HOST=argocd.azure.nimbit.de\n\nkubectl apply -f - <<EOF\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: tls-argocd-secret\n  namespace: argocd\nspec:\n  secretName: tls-argocd-secret\n  issuerRef:\n    kind: ClusterIssuer\n    name: le-clusterissuer\n  commonName: $HOST\n  dnsNames:\n    - $HOST\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-ingress\n  namespace: argocd\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: "true"\n    nginx.ingress.kubernetes.io/ssl-passthrough: "true"\n    # If you encounter a redirect loop or are getting a 307 response code\n    # then you need to force the nginx ingress to connect to the backend using HTTPS.\n    #\n    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"\nspec:\n  rules:\n  - host: $HOST\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: https\n  tls:\n  - hosts:\n    - $HOST\n    secretName: tls-argocd-secret \nEOF\n\n'))),(0,a.kt)("h2",{id:"monitoring"},"Monitoring"),(0,a.kt)("p",null,"Monitoring can be setup via Rancher. For detailed documentation on how to use the rancher monitoring see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ranchermanager.rancher.io/pages-for-subheaders/monitoring-and-alerting"},"Rancher Monitoring")))}u.isMDXComponent=!0}}]);